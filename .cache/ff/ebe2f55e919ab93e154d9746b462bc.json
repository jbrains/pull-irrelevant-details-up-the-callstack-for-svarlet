{"id":"src/SqlError.ts","dependencies":[{"name":"/project/pull-irrelevant-details-up-the-callstack/tsconfig.json","includedInParent":true,"mtime":1684814158565},{"name":"/project/pull-irrelevant-details-up-the-callstack/package.json","includedInParent":true,"mtime":1684814190881}],"generated":{"js":"\"use strict\";\n\n// Here we use a trick to make nominal types in typescript.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isSqlError = exports.sqlError = void 0;\n// As a Symbol is unique in js, and because we don't export it, the\n// only way to get a SqlError value is to use the constructor in this module.\n// In turn, we can build an Either<NotAnSqlError, SqlError> parser.\n// And we can also build a \"type guard\", which helps when we map the union of\n// error types downstream to an HttpResponse, a Loggable message, etc.\nvar sqlErrorTag = Symbol();\nvar sqlError = function sqlError(errorCode, reason) {\n  return {\n    _tag: sqlErrorTag,\n    errorCode: errorCode,\n    reason: reason\n  };\n};\nexports.sqlError = sqlError;\n// The following is the \"Type Guard\"\n// https://www.typescriptlang.org/docs/handbook/advanced-types.html#user-defined-type-guards\nvar isSqlError = function isSqlError(error) {\n  return error._tag === sqlErrorTag;\n};\nexports.isSqlError = isSqlError;"},"sourceMaps":{"js":{"mappings":[{"source":"src/SqlError.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":3,"column":0}},{"source":"src/SqlError.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":8,"column":0}},{"source":"src/SqlError.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":9,"column":0}},{"source":"src/SqlError.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":10,"column":0}},{"source":"src/SqlError.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":11,"column":0}},{"source":"src/SqlError.ts","name":null,"original":{"line":9,"column":0},"generated":{"line":12,"column":0}},{"source":"src/SqlError.ts","name":null,"original":{"line":11,"column":0},"generated":{"line":13,"column":0}},{"source":"src/SqlError.ts","name":null,"original":{"line":11,"column":6},"generated":{"line":13,"column":4}},{"source":"src/SqlError.ts","name":null,"original":{"line":11,"column":17},"generated":{"line":13,"column":15}},{"source":"src/SqlError.ts","name":null,"original":{"line":11,"column":20},"generated":{"line":13,"column":18}},{"source":"src/SqlError.ts","name":null,"original":{"line":11,"column":26},"generated":{"line":13,"column":24}},{"source":"src/SqlError.ts","name":null,"original":{"line":11,"column":26},"generated":{"line":13,"column":25}},{"source":"src/SqlError.ts","name":null,"original":{"line":11,"column":28},"generated":{"line":13,"column":26}},{"source":"src/SqlError.ts","name":null,"original":{"line":19,"column":7},"generated":{"line":14,"column":0}},{"source":"src/SqlError.ts","name":null,"original":{"line":19,"column":13},"generated":{"line":14,"column":4}},{"source":"src/SqlError.ts","name":null,"original":{"line":19,"column":21},"generated":{"line":14,"column":12}},{"source":"src/SqlError.ts","name":null,"original":{"line":19,"column":24},"generated":{"line":14,"column":15}},{"source":"src/SqlError.ts","name":null,"original":{"line":19,"column":13},"generated":{"line":14,"column":24}},{"source":"src/SqlError.ts","name":null,"original":{"line":19,"column":21},"generated":{"line":14,"column":32}},{"source":"src/SqlError.ts","name":null,"original":{"line":19,"column":25},"generated":{"line":14,"column":33}},{"source":"src/SqlError.ts","name":null,"original":{"line":19,"column":42},"generated":{"line":14,"column":42}},{"source":"src/SqlError.ts","name":null,"original":{"line":19,"column":44},"generated":{"line":14,"column":44}},{"source":"src/SqlError.ts","name":null,"original":{"line":19,"column":58},"generated":{"line":14,"column":50}},{"source":"src/SqlError.ts","name":null,"original":{"line":19,"column":58},"generated":{"line":15,"column":2}},{"source":"src/SqlError.ts","name":null,"original":{"line":19,"column":74},"generated":{"line":15,"column":9}},{"source":"src/SqlError.ts","name":null,"original":{"line":20,"column":2},"generated":{"line":16,"column":4}},{"source":"src/SqlError.ts","name":null,"original":{"line":20,"column":6},"generated":{"line":16,"column":8}},{"source":"src/SqlError.ts","name":null,"original":{"line":20,"column":8},"generated":{"line":16,"column":10}},{"source":"src/SqlError.ts","name":null,"original":{"line":20,"column":19},"generated":{"line":16,"column":21}},{"source":"src/SqlError.ts","name":null,"original":{"line":21,"column":2},"generated":{"line":17,"column":4}},{"source":"src/SqlError.ts","name":null,"original":{"line":21,"column":11},"generated":{"line":17,"column":13}},{"source":"src/SqlError.ts","name":null,"original":{"line":21,"column":2},"generated":{"line":17,"column":15}},{"source":"src/SqlError.ts","name":null,"original":{"line":21,"column":11},"generated":{"line":17,"column":24}},{"source":"src/SqlError.ts","name":null,"original":{"line":22,"column":2},"generated":{"line":18,"column":4}},{"source":"src/SqlError.ts","name":null,"original":{"line":22,"column":8},"generated":{"line":18,"column":10}},{"source":"src/SqlError.ts","name":null,"original":{"line":22,"column":2},"generated":{"line":18,"column":12}},{"source":"src/SqlError.ts","name":null,"original":{"line":23,"column":1},"generated":{"line":19,"column":3}},{"source":"src/SqlError.ts","name":null,"original":{"line":23,"column":1},"generated":{"line":20,"column":0}},{"source":"src/SqlError.ts","name":null,"original":{"line":23,"column":2},"generated":{"line":20,"column":1}},{"source":"src/SqlError.ts","name":null,"original":{"line":19,"column":13},"generated":{"line":21,"column":0}},{"source":"src/SqlError.ts","name":null,"original":{"line":19,"column":13},"generated":{"line":21,"column":7}},{"source":"src/SqlError.ts","name":null,"original":{"line":19,"column":13},"generated":{"line":21,"column":8}},{"source":"src/SqlError.ts","name":null,"original":{"line":19,"column":21},"generated":{"line":21,"column":16}},{"source":"src/SqlError.ts","name":null,"original":{"line":19,"column":21},"generated":{"line":21,"column":19}},{"source":"src/SqlError.ts","name":null,"original":{"line":19,"column":21},"generated":{"line":21,"column":27}},{"source":"src/SqlError.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":22,"column":0}},{"source":"src/SqlError.ts","name":null,"original":{"line":26,"column":0},"generated":{"line":23,"column":0}},{"source":"src/SqlError.ts","name":null,"original":{"line":28,"column":7},"generated":{"line":24,"column":0}},{"source":"src/SqlError.ts","name":null,"original":{"line":28,"column":13},"generated":{"line":24,"column":4}},{"source":"src/SqlError.ts","name":null,"original":{"line":28,"column":23},"generated":{"line":24,"column":14}},{"source":"src/SqlError.ts","name":null,"original":{"line":28,"column":26},"generated":{"line":24,"column":17}},{"source":"src/SqlError.ts","name":null,"original":{"line":28,"column":13},"generated":{"line":24,"column":26}},{"source":"src/SqlError.ts","name":null,"original":{"line":28,"column":23},"generated":{"line":24,"column":36}},{"source":"src/SqlError.ts","name":null,"original":{"line":28,"column":27},"generated":{"line":24,"column":37}},{"source":"src/SqlError.ts","name":null,"original":{"line":28,"column":48},"generated":{"line":24,"column":42}},{"source":"src/SqlError.ts","name":null,"original":{"line":28,"column":48},"generated":{"line":25,"column":2}},{"source":"src/SqlError.ts","name":null,"original":{"line":29,"column":2},"generated":{"line":25,"column":9}},{"source":"src/SqlError.ts","name":null,"original":{"line":29,"column":7},"generated":{"line":25,"column":14}},{"source":"src/SqlError.ts","name":null,"original":{"line":29,"column":8},"generated":{"line":25,"column":15}},{"source":"src/SqlError.ts","name":null,"original":{"line":29,"column":12},"generated":{"line":25,"column":19}},{"source":"src/SqlError.ts","name":null,"original":{"line":29,"column":17},"generated":{"line":25,"column":24}},{"source":"src/SqlError.ts","name":null,"original":{"line":29,"column":28},"generated":{"line":25,"column":35}},{"source":"src/SqlError.ts","name":null,"original":{"line":29,"column":28},"generated":{"line":26,"column":0}},{"source":"src/SqlError.ts","name":null,"original":{"line":28,"column":13},"generated":{"line":27,"column":0}},{"source":"src/SqlError.ts","name":null,"original":{"line":28,"column":13},"generated":{"line":27,"column":7}},{"source":"src/SqlError.ts","name":null,"original":{"line":28,"column":13},"generated":{"line":27,"column":8}},{"source":"src/SqlError.ts","name":null,"original":{"line":28,"column":23},"generated":{"line":27,"column":18}},{"source":"src/SqlError.ts","name":null,"original":{"line":28,"column":23},"generated":{"line":27,"column":21}},{"source":"src/SqlError.ts","name":null,"original":{"line":28,"column":23},"generated":{"line":27,"column":31}}],"sources":{"src/SqlError.ts":"// Here we use a trick to make nominal types in typescript.\n\n// As a Symbol is unique in js, and because we don't export it, the\n// only way to get a SqlError value is to use the constructor in this module.\n\n// In turn, we can build an Either<NotAnSqlError, SqlError> parser.\n\n// And we can also build a \"type guard\", which helps when we map the union of\n// error types downstream to an HttpResponse, a Loggable message, etc.\n\nconst sqlErrorTag = Symbol();\n\nexport type SqlError = {\n  _tag: typeof sqlErrorTag;\n  errorCode: number;\n  reason: string;\n};\n\nexport const sqlError = (errorCode: number, reason: string): SqlError => ({\n  _tag: sqlErrorTag,\n  errorCode,\n  reason\n});\n\n// The following is the \"Type Guard\"\n// https://www.typescriptlang.org/docs/handbook/advanced-types.html#user-defined-type-guards\n\nexport const isSqlError = (error: {_tag: Symbol}): error is SqlError =>\n  error._tag === sqlErrorTag;\n"},"lineCount":null}},"error":null,"hash":"2977b6932c4322bfcd1a847b13b57bc7","cacheData":{"env":{}}}